library(survminer)
df_melanoma30 <- melanoma30
# View the first few rows and structure
head(df_melanoma30)
str(df_melanoma30)
summary(df_melanoma30)
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
df_melanoma30 %>%
mutate(invas2=ifelse(invas2=="Clark I-III",1,
ifelse(invas2=="Clark IV-V",2,invas2)))
View(df_melanoma30)
df_melanoma30<-df_melanoma30 %>%
mutate(invas2=ifelse(invas2=="Clark I-III",1,
ifelse(invas2=="Clark IV-V",2,invas2)))
View(df_melanoma30)
a=0
b=0
c=0
d=0
for(i in length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
df_melanoma30[i,12]==1)
length(df_melanoma30[,1]
length(df_melanoma30[,1]
length(df_melanoma30[,1])
a=0
b=0
c=0
d=0
for(i in 1:length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
cat("For clark level |-||| there was",a,"survivors")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/b
cc<-c/d
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/a+b
cc<-c/d
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/a+b
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/(a+b)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/(a+b)
cc<-c/(c+d)
a=0
b=0
c=0
d=0
for(i in 1:length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
aa<-a/(a+b)
cc<-c/(c+d)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an
avereage survival rate of",cc,"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an
avereage survival rate of",cc,"which is in total",(a+b),"\n")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"which is in total",(a+b),"\n")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an avereage
survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an avereage
survival rate of",cc,"which the total amount of patients",(c+d),"\n")
#Bruges til at trÃ¦kke Crypto priser
...
latex
\lstinputlisting[
...
#code
source("Projekt_kode_Pull_Crypto.R")
load("C:/Users/jensp/Downloads/melanoma30.RData")
load("C:/Users/jensp/Downloads/melanoma30.RData")
dplyr
library(dplyr)
library(ggplot2)
library(survival)
library(KMsurv)
library(survminer)
df_melanoma30 <- melanoma30
# View the first few rows and structure
head(df_melanoma30)
str(df_melanoma30)
summary(df_melanoma30)
#check for corelation between clark level and death
df_melanoma30<-df_melanoma30 %>%
mutate(invas2=ifelse(invas2=="Clark I-III",1,
ifelse(invas2=="Clark IV-V",2,invas2)))
View(df_melanoma30)
a=0
b=0
c=0
d=0
for(i in 1:length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
aa<-a/(a+b)
cc<-c/(c+d)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an avereage
survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an avereage
survival rate of",cc,"which the total amount of patients",(c+d),"\n")
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
# Histogram and density plot for continuous variables
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(aes(y = ..density.. * max(..count..)), color = "red") +
ggtitle(paste("Histogram and Density of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) -> plot
print(plot)
}
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars], skewness, na.rm = TRUE)
# Frequency tables
lapply(df_melanoma30[categorical_vars], table)
# Bar plots for categorical variables
for (var in categorical_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_bar(fill = "lightblue", color = "black") +
ggtitle(paste("Bar plot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) -> plot
print(plot)
}
df_melanoma30$thickness_cat <- cut(df_melanoma30$thickness,
breaks = quantile(df_melanoma30$thickness, probs = c(0, 1/5, 2/5, 3/5, 4/5, 1), na.rm = TRUE),
labels = c("Cat 1", "Cat 2", "Cat 3", "Cat 4", "Cat 5"))
plot(df_melanoma30$thickness_cat)
survival_object <- Surv(df_melanoma30$time, df_melanoma30$dead)
plot(survival_object)
# Fit Kaplan-Meier survival curves for thickness categories
fit <- survfit(survival_object ~ thickness_cat, data = df_melanoma30)
length(survival_object)
# Plot the survival curves
ggsurvplot(fit, data = df_melanoma30,
pval = TRUE, # Adds p-value from log-rank test
conf.int = TRUE, # Adds confidence intervals
risk.table = TRUE, # Shows risk table
ggtheme = theme_minimal(),
palette = "Dark2",
title = "Kaplan-Meier Survival Curves by Tumor Thickness Categories")
# Plot the survival curves
ggsurvplot(fit, data = df_melanoma30,
pval = TRUE, # Adds p-value from log-rank test
conf.int = TRUE, # Adds confidence intervals
risk.table = TRUE, # Shows risk table
ggtheme = theme_minimal(),
palette = "Dark2",
title = "Kaplan-Meier Survival Curves by Tumor Thickness Categories")
rm(a,b,c,d,aa,cc)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an avereage
survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an avereage
survival rate of",cc,"which the total amount of patients",(c+d),"\n")
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
# Histogram and density plot for continuous variables
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(aes(y = ..density.. * max(..count..)), color = "red") +
ggtitle(paste("Histogram and Density of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) -> plot
print(plot)
}
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars], skewness, na.rm = TRUE)
# Table of frequencies for categorical variables
categorical_vars <- c("status", "dead", "ici", "epicell", "ulceration", "sex", "invas2")
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars], skewness, na.rm = TRUE)
library(dplyr)
library(ggplot2)
library(survival)
library(KMsurv)
library(survminer)
df_melanoma30 <- melanoma30
# View the first few rows and structure
head(df_melanoma30)
str(df_melanoma30)
summary(df_melanoma30)
#check for corelation between clark level and death
df_melanoma30<-df_melanoma30 %>%
mutate(invas2=ifelse(invas2=="Clark I-III",1,
ifelse(invas2=="Clark IV-V",2,invas2)))
View(df_melanoma30)
a=0
b=0
c=0
d=0
for(i in 1:length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
aa<-a/(a+b)
cc<-c/(c+d)
rm(a,b,c,d,aa,cc)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an avereage
survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an avereage
survival rate of",cc,"which the total amount of patients",(c+d),"\n")
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
# Histogram and density plot for continuous variables
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(aes(y = ..density.. * max(..count..)), color = "red") +
ggtitle(paste("Histogram and Density of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) -> plot
print(plot)
}
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars], skewness, na.rm = TRUE)
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars],skewness, na.rm = TRUE)
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars],skewness, na.rm = FALSE)
View(df_melanoma30)
spec<-df_melanoma30[,11]
plot(spec)
print(df_melanoma30[,1])
print(df_melanoma30[,2])
print(df_melanoma30[,3])
print(df_melanoma30[,4])
print(df_melanoma30[,5])
print(df_melanoma30[,6])
sum(is.na(df_melanoma30))
#Plibrary(quantmod)
library(quantmod)
library(ggplot2)
library(dplyr)
#start dag
day_one<-"2022-10-10" #skal vÃ¦re tidligst 2020-04-10
#code
source("Projekt_kode_Pull_Crypto.R")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
install.packages("urca")
install.packages("Rtools")
library(urca)
#johansen test
source("Projekt_kode_Pull_Crypto.R")
set.seed(420)
set.seed(420)#blazing
ca.jo
ca.jo(Crypto.all.adj.pro)
class(Crypto.all.adj.pro)
Johan.test.crypto<-ca.jo(Crypto.all.adj.pro, type="trace", K=1, ecdet="none",spec=longrun)
summary(Johan.test.crypto)
Johan.test.crypto<-ca.jo(Crypto.all.adj.pro, type="trace", K=1, ecdet="none",spec="longrun")
summary(Johan.test.crypto)
Johan.test.crypto<-ca.jo(Crypto.all.adj.pro, type="trace", K=4, ecdet="none",spec="longrun")
summary(Johan.test.crypto)
source("Tests_in_Code")
source("~/GitHub/P7---Cointegration-in-the-cryptocurrency-market/1.Projekt_kode/Projekt_kode_main.R", echo=TRUE)
source("Tests_in_Code")
setwd("~/GitHub/P7---Cointegration-in-the-cryptocurrency-market/1.Projekt_kode")
source("Tests_in_Code")
#code to bring in the data and refine it into one data frame + check for NA values
source("Projekt_kode_Pull_Crypto.R")
source("Tests_in_Code")
setwd("~/GitHub/P7---Cointegration-in-the-cryptocurrency-market/1.Projekt_kode")
#johansen test
source("Projekt_kode_Pull_Crypto.R")
source("Tests_in_Code")
source("Tests_in_Code.R")
source("Tests_in_Code.R")
summary(Johan.test.crypto)
source("Tests_in_Code.R")
source("Tests_in_Code.R")
# Get Bitcoin data
Crypto<-function(stock,period1,period2){
getSymbols(stock, src = "yahoo", from = period1, to = period2, auto.assign = FALSE)
}
#after the function will the date for the first data be written
#how far you can go back in time from yahoo
Bitcoin<-Crypto("BTC-USD",day_one,"2024-10-10")#2014-09-17
#start dag
day_one<-"2022-10-10" #skal vÃ¦re tidligst 2020-04-10
#after the function will the date for the first data be written
#how far you can go back in time from yahoo
Bitcoin<-Crypto("BTC-USD",day_one,"2024-10-10")#2014-09-17
Ethereum<-Crypto("ETH-USD",day_one,"2024-10-10")#2017-11-09
Solana<-Crypto("SOL-USD",day_one,"2024-10-10")# 2020-04-10
Ripple<-Crypto("XRP-USD",day_one,"2024-10-10")#2017-11-09
#lsit for names of the Cryptos
NameCryptos<-list("Bitcoin","Ethereum","Solana","Ripple")
#cheeks for NA Values and prints out if good or not
for (i in NameCryptos) {
df<-get(i)
if (anyNA(df)) {cat(i,"have NA values")
}
else{cat(i,"is good to go
")
}
}
NameCryptos.adj<-list()
#start dag
day_one<-"2022-10-10" #skal vÃ¦re tidligst 2020-04-10
# Get Bitcoin data
Crypto<-function(stock,period1,period2){
getSymbols(stock, src = "yahoo", from = period1, to = period2, auto.assign = FALSE)
}
#after the function will the date for the first data be written
#how far you can go back in time from yahoo
Bitcoin<-Crypto("BTC-USD",day_one,"2024-10-10")#2014-09-17
Ethereum<-Crypto("ETH-USD",day_one,"2024-10-10")#2017-11-09
Solana<-Crypto("SOL-USD",day_one,"2024-10-10")# 2020-04-10
Ripple<-Crypto("XRP-USD",day_one,"2024-10-10")#2017-11-09
#lsit for names of the Cryptos
NameCryptos<-list("Bitcoin","Ethereum","Solana","Ripple")
#cheeks for NA Values and prints out if good or not
for (i in NameCryptos) {
df<-get(i)
if (anyNA(df)) {cat(i,"have NA values")
}
else{cat(i,"is good to go
")
}
}
#NameCryptos.adj<-list()
#we will now pull out only the adjusted prices for use in Cointegation
for (i in NameCryptos) {
df<-get(i)
assign(paste0(i,".adj"),df[,6])
NameCryptos.adj<-append(NameCryptos.adj,as.character(paste0(i,".adj")))
}
NameCryptos.adj<-list()
#we will now pull out only the adjusted prices for use in Cointegation
for (i in NameCryptos) {
df<-get(i)
assign(paste0(i,".adj"),df[,6])
NameCryptos.adj<-append(NameCryptos.adj,as.character(paste0(i,".adj")))
}
rm(NameCryptos.adj)
NameCryptos.adj<-list()
#we will now pull out only the adjusted prices for use in Cointegation
for (i in NameCryptos) {
df<-get(i)
assign(paste0(i,".adj"),df[,6])
NameCryptos.adj<-append(NameCryptos.adj,as.character(paste0(i,".adj")))
}
for (i in NameCryptos.adj) {
rm(i)
}
for (i in NameCryptos.adj) {
rm(list = i, envir = .GlobalEnv)
}
rm(NameCryptos.adj)
#RULES FOR THE CODE IF YOU WANT TO CHANGE ANYTHING
#
#
library(quantmod)
#RULES FOR THE CODE IF YOU WANT TO CHANGE ANYTHING
#
#
library(quantmod)
cat("\033[31mThis text will be printed in red.\033[0m\n")
cat("This text will be printed in red.\033[0m\n")
cat("\033[31mRULES FOR THE CODE IF YOU WANT TO CHANGE ANYTHING
1. REMOVE ALL EXTRA GLOBAL VARIBELS YOU WONT BE NEEDING AND DONT THINK WILL EVER BE NEEDED
2. DONT YOU  DARE FUCKING TOUCH MY CODE\033[0m\n" )
aov(Crypto.all.adj.pro)
library(urca)
aov(Crypto.all.adj.pro)
View(Crypto.all.adj.pro)
aov(Bitcoin ~ Ethereum)
aov(Bitcoin ~ Ethereum,data=Crypto.all.adj.pro)
summary(ANova_bitcoin)
ANova_bitcoin<-aov(Bitcoin ~ Ethereum, data = Crypto.all.adj.pro)
summary(ANova_bitcoin)
summary(ANova_bitcoin)
plot(ANova_bitcoin$residuals)
plot(ANova_bitcoin$coefficients)
plot(ANova_bitcoin$)
plot(ANova_bitcoin$effects)
plot(ANova_bitcoin$rank)
plot(ANova_bitcoin$fitted.values)
plot(ANova_bitcoin$qr)
plot(ANova_bitcoin$qr$qraux)
plot(ANova_bitcoin$df.residual)
plot(ANova_bitcoin$call)
plot(ANova_bitcoin$terms)
plot(ANova_bitcoin$qr$pivot)
plot(ANova_bitcoin$qr$tol)
plot(ANova_bitcoin$qr$rank)
plot(ANova_bitcoin)
summary(ANova_bitcoin)
ANova_bitcoin<-aov(Bitcoin ~ Ethereum+Ripple, data = Crypto.all.adj.pro)
summary(ANova_bitcoin)
ANova_bitcoin<-aov(Bitcoin ~ Ethereum*Ripple, data = Crypto.all.adj.pro)
summary(ANova_bitcoin)
updateR()
install.packages("installr ")
install.packages("installr")
library(installr)
updateR()
