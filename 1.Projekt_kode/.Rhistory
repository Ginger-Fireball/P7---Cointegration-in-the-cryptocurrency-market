getSymbols(stock, src = "yahoo", from = period1, to = period2, auto.assign = FALSE)
}
#after the function will the date for the first data be written
#how far you can go back in time from yahoo
Bitcoin<-Crypto("BTC-USD","2009-10-10","2024-10-10")#2014-09-17
Ethereum<-Crypto("ETH-USD","2009-10-10","2024-10-10")#2017-11-09
Solana<-Crypto("SOL-USD","2009-10-10","2024-10-10")# 2020-04-10
Ripple<-Crypto("XRP-USD","2009-10-10","2024-10-10")#2017-11-09
#lsit for names of the Cryptos
NameCryptos<-list("Bitcoin","Ethereum","Solana","Ripple")
#cheeks for NA Values and prints out if good or not
for (i in NameCryptos) {
df<-get(i)
if (anyNA(df)) {cat(i,"have NA values")
}
else{cat(i,"is good to go
")
}
}
NameCryptos.adj<-list()
#we will now pull out only the adjusted prices for use in Cointegation
for (i in NameCryptos) {
df<-get(i)
assign(paste0(i,".adj"),df[,6])
NameCryptos.adj<-append(NameCryptos.adj,as.character(paste0(i,".adj")))
}
Crypto.all.adj<-data.frame()
for (i in NameCryptos.adj ){
df<-get(i)
Crypto.all.adj<-rbind(Crypto.all.adj,df)
}
View(Crypto.all.adj)
Crypto.all.adj<-cbind(Crypto.all.adj,df)
Crypto.all.adj<-data.frame()
Crypto.all.adj<-cbind(Crypto.all.adj,df)
for (i in NameCryptos.adj ){
df<-get(i)
Crypto.all.adj<-cbind(Crypto.all.adj,df)
}
Crypto.all.adj<-data.frame()
for (i in NameCryptos.adj ){
df<-get(i)
Crypto.all.adj<-cbind(Crypto.all.adj,df)
}
Crypto.all.adj<-NULL
for (i in NameCryptos.adj ){
df<-get(i)
Crypto.all.adj<-cbind(Crypto.all.adj,df)
}
View(Crypto.all.adj)
# Get Bitcoin data
Crypto<-function(stock,period1,period2){
getSymbols(stock, src = "yahoo", from = period1, to = period2, auto.assign = FALSE)
}
#after the function will the date for the first data be written
#how far you can go back in time from yahoo
Bitcoin<-Crypto("BTC-USD","2020-04-10","2024-10-10")#2014-09-17
Ethereum<-Crypto("ETH-USD","2020-04-10","2024-10-10")#2017-11-09
Solana<-Crypto("SOL-USD","2020-04-10","2024-10-10")# 2020-04-10
Ripple<-Crypto("XRP-USD","2020-04-10","2024-10-10")#2017-11-09
#lsit for names of the Cryptos
NameCryptos<-list("Bitcoin","Ethereum","Solana","Ripple")
#cheeks for NA Values and prints out if good or not
for (i in NameCryptos) {
df<-get(i)
if (anyNA(df)) {cat(i,"have NA values")
}
else{cat(i,"is good to go
")
}
}
NameCryptos.adj<-list()
#we will now pull out only the adjusted prices for use in Cointegation
for (i in NameCryptos) {
df<-get(i)
assign(paste0(i,".adj"),df[,6])
NameCryptos.adj<-append(NameCryptos.adj,as.character(paste0(i,".adj")))
}
Crypto.all.adj<-NULL
for (i in NameCryptos.adj ){
df<-get(i)
Crypto.all.adj<-cbind(Crypto.all.adj,df)
}
View(Crypto.all.adj)
rm(df)
rm(i)
length(Crypto.all.adj)
length(Solana.adj)
# Plot priser
gg<plot(Crypto.all.adj, aes(1:length(Solana.adj))) +
geom_line(aes(y = BTC.USD.Adjusted, colour = "Bitcoin")) +
geom_line(aes(y = ETH.USD.Adjusted, colour = "Ethereum")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plot priser
ggplot(Crypto.all.adj, aes(1:length(Solana.adj))) +
geom_line(aes(y = BTC.USD.Adjusted, colour = "Bitcoin")) +
geom_line(aes(y = ETH.USD.Adjusted, colour = "Ethereum")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
min(Crypto.all.adj[1,])
min(Crypto.all.adj[,1])
Crypto.all.adj.p<-NULL
for (i in 1:4) {
Crypto.all.adj.p<-(Crypto.all.adj[,i]/min(Crypto.all.adj[,i]))
}
Crypto.all.adj.p<-NULL
for (i in 1:4) {
Crypto.all.adj.p<-cbind(Crypto.all.adj.p(Crypto.all.adj[,i]/min(Crypto.all.adj[,i])))
}
Crypto.all.adj.p<-NULL
for (i in 1:4) {
Crypto.all.adj.p<-cbind(Crypto.all.adj.p(Crypto.all.adj[,i]/min(Crypto.all.adj[,i])))
}
Crypto.all.adj.p<-NULL
for (i in 1:4) {
Crypto.all.adj.p<-cbind(Crypto.all.adj.p, (Crypto.all.adj[,i]/min(Crypto.all.adj[,i])))
}
View(Crypto.all.adj.p)
names(Crypto.all.adj.p)
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = BTC.USD.Adjusted, colour = "Bitcoin")) +
geom_line(aes(y = ETH.USD.Adjusted, colour = "Ethereum")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
#code
source("Projekt_kode_Pull_Crypto.R")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = BTC.USD.Adjusted, colour = "Bitcoin")) +
geom_line(aes(y = ETH.USD.Adjusted, colour = "Ethereum")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plot priser
ggplot(Crypto.all.adj, aes(1:length(Solana.adj))) +
geom_line(aes(y = BTC.USD.Adjusted, colour = "Bitcoin")) +
geom_line(aes(y = ETH.USD.Adjusted, colour = "Ethereum")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = BTC.USD.Adjusted, colour = "Bitcoin")) +
geom_line(aes(y = ETH.USD.Adjusted, colour = "Ethereum")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
source("~/7 sem/Projekt_kode/Projekt_kode_Pull_Crypto.R", echo=TRUE)
source("~/7 sem/Projekt_kode/Projekt_kode_main.R", echo=TRUE)
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = BTC.USD.Adjusted, colour = "Bitcoin")) +
geom_line(aes(y = ETH.USD.Adjusted, colour = "Ethereum")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
Crypto.all.adj[1,i]
Crypto.all.adj[,i]
Crypto.all.adj
Crypto.all.adj[1,2]
Crypto.all.adj[1,1]
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
View(Crypto.all.adj.pro)
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
}
for (i in 1:4) {
}
View(Crypto.all.adj.pro)
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/(Crypto.all.adj[1,i])))
}
View(Crypto.all.adj.pro)
View(NameCryptos.adj)
View(NameCryptos.adj)
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
View(Crypto.all.adj.pro)
dd<-(Crypto.all.adj[,1]/Crypto.all.adj[1,1])
dd
dd <- Crypto.all.adj[, 1] / Crypto.all.adj[1, 1]
# Check result
print(dd)
Crypto.all.adj[, 1]
#Plibrary(quantmod)
library(quantmod)
library(ggplot2)
library(dplyr)
source("~/7 sem/Projekt_kode/Projekt_kode_Pull_Crypto.R", echo=TRUE)
dd <- Crypto.all.adj[, 1] / Crypto.all.adj[1, 1]
# Check result
print(dd)
dd <- Crypto.all.adj[,1] / Crypto.all.adj[1, 1]
# Check result
print(dd)
dd <- Ethereum.adj / Crypto.all.adj[1, 1]
# Check result
print(dd)
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/min(Crypto.all.adj[1,i])))
}
View(Crypto.all.adj.pro)
View(Crypto.all.adj)
Crypto.all.adj[,1]
Crypto.all.adj[1,i]
Crypto.all.adj[1,1]
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
View(Crypto.all.adj.pro)
Crypto.all.adj<-as.data.frame(Crypto.all.adj)
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
View(Crypto.all.adj.pro)
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
Crypto.all.adj.pro<-as.data.frame(Crypto.all.adj.pro)
rm(df)
rm(i)
source("~/7 sem/Projekt_kode/Projekt_kode_Pull_Crypto.R", echo=TRUE)
source("~/7 sem/Projekt_kode/Projekt_kode_main.R", echo=TRUE)
View(Crypto.all.adj.pro)
View(Crypto.all.adj)
Crypto.all.adj<-as.data.frame(Crypto.all.adj)
Crypto.all.adj
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
View(Crypto.all.adj.pro)
colnames(Crypto.all.adj.pro)<-NameCryptos.adj
View(Crypto.all.adj.pro)
colnames(Crypto.all.adj.pro)<-NameCryptos
#Plibrary(quantmod)
library(quantmod)
library(ggplot2)
library(dplyr)
#code
source("Projekt_kode_Pull_Crypto.R")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
#  geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
#  geom_line(aes(y = Solana, colour = "Solana")) +
#  geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
Crypto.all.adj.pro<-as.data.frame(Crypto.all.adj.pro)
colnames(Crypto.all.adj.pro)<-NameCryptos
View(Crypto.all.adj.pro)
#Plibrary(quantmod)
library(quantmod)
library(ggplot2)
library(dplyr)
#start dag
day_one<-"2022-10-10" #skal være tidligst 2020-04-10
#code
source("Projekt_kode_Pull_Crypto.R")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
#  geom_line(aes(y = Solana, colour = "Solana")) +
#  geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
#Plibrary(quantmod)
library(quantmod)
library(ggplot2)
library(dplyr)
#start dag
day_one<-"2022-10-10" #skal være tidligst 2020-04-10
#code
source("Projekt_kode_Pull_Crypto.R")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
open("Projekt_kode_Pull_Crypto.R")
open(Projekt_kode_Pull_Crypto.R)
load("C:/Users/jensp/Downloads/melanoma30.RData")
source("C:/Users/jensp/Downloads/Mini_project_varighedsanalyse.R", echo=TRUE)
source("C:/Users/jensp/Downloads/Mini_project_varighedsanalyse.R", echo=TRUE)
install.packages("survminer")
install.packages("survminer")
library(ggplot2)
library(survival)
library(KMsurv)
library(survminer)
df_melanoma30 <- melanoma30
# View the first few rows and structure
head(df_melanoma30)
str(df_melanoma30)
summary(df_melanoma30)
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
View(df_melanoma30)
library(ggplot2)
library(survival)
library(KMsurv)
library(survminer)
df_melanoma30 <- melanoma30
# View the first few rows and structure
head(df_melanoma30)
str(df_melanoma30)
summary(df_melanoma30)
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
df_melanoma30 %>%
mutate(invas2=ifelse(invas2=="Clark I-III",1,
ifelse(invas2=="Clark IV-V",2,invas2)))
View(df_melanoma30)
df_melanoma30<-df_melanoma30 %>%
mutate(invas2=ifelse(invas2=="Clark I-III",1,
ifelse(invas2=="Clark IV-V",2,invas2)))
View(df_melanoma30)
a=0
b=0
c=0
d=0
for(i in length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
df_melanoma30[i,12]==1)
length(df_melanoma30[,1]
length(df_melanoma30[,1]
length(df_melanoma30[,1])
a=0
b=0
c=0
d=0
for(i in 1:length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
cat("For clark level |-||| there was",a,"survivors")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/b
cc<-c/d
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/a+b
cc<-c/d
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/a+b
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/(a+b)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/(a+b)
cc<-c/(c+d)
a=0
b=0
c=0
d=0
for(i in 1:length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
aa<-a/(a+b)
cc<-c/(c+d)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an
avereage survival rate of",cc,"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an
avereage survival rate of",cc,"which is in total",(a+b),"\n")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"which is in total",(a+b),"\n")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an avereage
survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an avereage
survival rate of",cc,"which the total amount of patients",(c+d),"\n")
