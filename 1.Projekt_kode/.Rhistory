<<<<<<< Updated upstream
print(p)
for (i in 1:4) {
p <- ur.df(ts(Crypto.all.adj)[, i], lags = 3)
cat("Results for", as.character(NameCryptos[i]), ":\n")
#print(summary(p))
print(p)
cat("\n------------------------------------\n")
}
for (i in 1:4) {
p <- ur.df(ts(Crypto.all.adj)[, i], lags = 3)
cat("Results for", as.character(NameCryptos[i]), ":\n")
print(summary(p))
cat("\n------------------------------------\n")
}
for (i in 1:4) {
p <- ur.df(var_Crypto_all_adj[, i], lags = 3)
cat("Results for", as.character(NameCryptos[i]), ":\n")
print(summary(p))
cat("\n------------------------------------\n")
}
for (i in 1:4) {
p <- ur.df(ts(Crypto.all.adj)[, i], lags = 3)
cat("Results for", as.character(NameCryptos[i]), ":\n")
print(summary(p))
cat("\n------------------------------------\n")
}
NameCryptos.adj
NameCryptos.adj<-list()
#we will now pull out only the adjusted prices for use in Cointegation
for (i in NameCryptos) {
df<-get(i)
assign(paste0(i,".adj"),df[,6])
NameCryptos.adj<-append(NameCryptos.adj,as.character(paste0(i,".adj")))
}
NameCryptos.adj
=======
>>>>>>> Stashed changes
View(NameCryptos.adj)
Training_all <- tail(Crypto_all_adj*0,9)
Training_all <- tail(Crypto_all_adj*0.9)
# Making Training and validation data set
nrow(Crypto_all_adj)
# Making Training and validation data set
nrow(Crypto_all_adj)
cat("\033[31mRULES FOR THE CODE IF YOU WANT TO CHANGE ANYTHING
1. REMOVE ALL EXTRA GLOBAL VARIBELS YOU WONT BE
NEEDING AND YOU DONT THINK EVER WILL BE NEEDED
2. DONT YOU  DARE FUCKING TOUCH MY CODE\033[0m\n" )
library(quantmod)
library(ggplot2)
library(dplyr)
library(urca)
set.seed(420)#Blaze It
#start dag
day_one<-"2022-10-10" #skal være tidligst 2020-04-10
#code to bring in the data and refine it into one data frame + check for NA values
source("Projekt_kode_Pull_Crypto.R")
# Making Training and validation data set
nrow(Crypto_all_adj)
# Get Bitcoin data
Crypto<-function(stock,period1,period2){
getSymbols(stock, src = "yahoo", from = period1, to = period2, auto.assign = FALSE)
}
#after the function will the date for the first data be written
#how far you can go back in time from yahoo
Bitcoin <- Crypto("BTC-USD",day_one,"2024-10-10")#2014-09-17
Ethereum <- Crypto("ETH-USD",day_one,"2024-10-10")#2017-11-09
Solana <- Crypto("SOL-USD",day_one,"2024-10-10")# 2020-04-10
Ripple <- Crypto("XRP-USD",day_one,"2024-10-10")#2017-11-09
#lsit for names of the Cryptos
NameCryptos <- list("Bitcoin","Ethereum","Solana","Ripple")
#cheeks for NA Values and prints out if good or not
for (i in NameCryptos) {
df <- get(i)
if (anyNA(df)) {cat(i, "have NA values")
}
else{cat(i, "is good to go
")
}
}
NameCryptos_adj<-list()
#we will now pull out only the adjusted prices for use in Cointegation
for (i in NameCryptos) {
df <- get(i)
assign(paste0(i,".adj"),df[,6])
NameCryptos_adj <- append(NameCryptos_adj, as.character(paste0(i,".adj")))
}
#This saves all the adjusted in one Data Frame
Crypto_all_adj<-NULL
for (i in NameCryptos_adj ){
df<-get(i)
Crypto_all_adj<-cbind(Crypto_all_adj,df)
}
colnames(Crypto_all_adj) <- NameCryptos
Crypto_all_adj <- as.data.frame(Crypto_all_adj)
#this looks at makes it so we can see it in procentege
Crypto_all_adj_pro<-NULL
for (i in 1:4) {
Crypto_all_adj_pro<-cbind(Crypto_all_adj_pro, (Crypto_all_adj[,i]/Crypto_all_adj[1,i]))
}
Crypto_all_adj_pro<-as.data.frame(Crypto_all_adj_pro)
colnames(Crypto_all_adj_pro)<-NameCryptos
# Making Training and validation data set
nrow(Crypto_all_adj)
# Making Training and validation data set
Training_size <- round(0.9*nrow(Crypto_all_adj))
Training_size
validation_size <- nrow(Crypto_all_adj) - Training_size
validation_size
Training_all <- tail(Crypto_all_adj, n = Training_size)
Validation_all <- head(Crypto_all_adj, n = validation_size)
Training_all
nrow(Training_all)
Training_size
cat("\033[31mRULES FOR THE CODE IF YOU WANT TO CHANGE ANYTHING
1. REMOVE ALL EXTRA GLOBAL VARIBELS YOU WONT BE
NEEDING AND YOU DONT THINK EVER WILL BE NEEDED
2. DONT YOU  DARE FUCKING TOUCH MY CODE\033[0m\n" )
library(quantmod)
library(ggplot2)
library(dplyr)
library(urca)
set.seed(420)#Blaze It
#start dag
day_one <- "2022-10-10" #skal være tidligst 2020-04-10
#code to bring in the data and refine it into one data frame + check for NA values
source("Projekt_kode_Pull_Crypto.R")
# Get Bitcoin data
Crypto<-function(stock,period1,period2){
getSymbols(stock, src = "yahoo", from = period1, to = period2, auto.assign = FALSE)
}
#after the function will the date for the first data be written
#how far you can go back in time from yahoo
Bitcoin <- Crypto("BTC-USD",day_one,"2024-10-10")#2014-09-17
Ethereum <- Crypto("ETH-USD",day_one,"2024-10-10")#2017-11-09
Solana <- Crypto("SOL-USD",day_one,"2024-10-10")# 2020-04-10
Ripple <- Crypto("XRP-USD",day_one,"2024-10-10")#2017-11-09
#lsit for names of the Cryptos
NameCryptos <- list("Bitcoin","Ethereum","Solana","Ripple")
#cheeks for NA Values and prints out if good or not
for (i in NameCryptos) {
df <- get(i)
if (anyNA(df)) {cat(i, "have NA values")
}
else{cat(i, "is good to go
")
}
}
NameCryptos_adj<-list()
#we will now pull out only the adjusted prices for use in Cointegation
for (i in NameCryptos) {
df <- get(i)
assign(paste0(i,".adj"),df[,6])
NameCryptos_adj <- append(NameCryptos_adj, as.character(paste0(i,".adj")))
}
#This saves all the adjusted in one Data Frame
Crypto_all_adj<-NULL
for (i in NameCryptos_adj ){
df<-get(i)
Crypto_all_adj<-cbind(Crypto_all_adj,df)
}
colnames(Crypto_all_adj) <- NameCryptos
Crypto_all_adj <- as.data.frame(Crypto_all_adj)
#this looks at makes it so we can see it in procentege
Crypto_all_adj_pro<-NULL
for (i in 1:4) {
Crypto_all_adj_pro<-cbind(Crypto_all_adj_pro, (Crypto_all_adj[,i]/Crypto_all_adj[1,i]))
}
Crypto_all_adj_pro<-as.data.frame(Crypto_all_adj_pro)
colnames(Crypto_all_adj_pro)<-NameCryptos
# Making Training and validation data set
Training_size <- round(0.9*nrow(Crypto_all_adj))
validation_size <- nrow(Crypto_all_adj) - Training_size
# Splitting the data
Training_all <- tail(Crypto_all_adj, n = Training_size)
Validation_all <- head(Crypto_all_adj, n = validation_size)
#Removes all extra global variables so it doesn't get to crowded
rm(df)
rm(i)
for (i in NameCryptos_adj) {
rm(list = i, envir = .GlobalEnv)
}
rm(NameCryptos_adj)
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Crypto.all.adj.pro, aes(1:length(Bitcoin))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in levels, with each Crypto having it's own plot
for (i in 1:4) {
# Open pdf device
pdf(paste0("Billeder/Crypto_in_levels_", as.character(NameCryptos[i]), ".pdf"))
# Create the plot
p <- ggplot(Training_all, aes(x = 1:nrow(Training_all), y = Training_all[, i])) +
geom_line(aes(colour = as.character(NameCryptos[i]))) +
labs(x = "Days", y = "Price in Levels") +
scale_color_manual(
values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1", "Solana" = "blue", "Ripple" = "green"),
labels = as.character(NameCryptos[i]),
name = NULL
) +
theme(legend.position = "bottom")
# Print to pdf device
print(p)
# Close pdf device
dev.off()
}
library(vars)
library(tseries)
<<<<<<< Updated upstream
#Number of lags in our model
lag_selection <- VARselect(ts_Training_all, lag.max = 100, type = "const")
print(lag_selection$selection)
library(vars)
library(tseries)
#Number of lags in our model
lag_selection <- VARselect(ts_Training_all, lag.max = 100, type = "const")
ts_Training_all<-ts(Training_all)
#Number of lags in our model
lag_selection <- VARselect(ts_Training_all, lag.max = 100, type = "const")
print(lag_selection$selection)
=======
#Number of lags in our model
lag_selection <- VARselect(ts_Training_all, lag.max = 100, type = "const")
print(lag_selection$selection)
library(vars)
library(tseries)
#Number of lags in our model
lag_selection <- VARselect(ts_Training_all, lag.max = 100, type = "const")
ts_Training_all<-ts(Training_all)
#Number of lags in our model
lag_selection <- VARselect(ts_Training_all, lag.max = 100, type = "const")
print(lag_selection$selection)
>>>>>>> Stashed changes
plot(1:length(lag_selection$criteria[1,]),lag_selection$criteria[1,])
#we use AIC and it says 3
length(lag_selection)
View(lag_selection)
ts_Training_all<-ts(Training_all)
adf.test(ts_Training_all[, "BTC.USD.Adjusted"])
adf.test(ts_Training_all[, "XRP.USD.Adjusted"])
NameCryptos[2]
as.character(2983)
str(23)
1:4
lag_selection$criteria[1,]
ts_Training_all<-ts(Training_all)
adf.test(ts_Training_all[, "BTC.USD.Adjusted"])
NameCryptos[2]
as.character(2983)
str(23)
1:4
lag_selection$criteria[1,]
View(lag_selection$criteria)
# Making Training and validation data set
Training_size <- round(0.9*nrow(Crypto_all_adj))
validation_size <- nrow(Crypto_all_adj) - Training_size
# Splitting the data
Training_all <- tail(Crypto_all_adj, n = Training_size)
Validation_all <- head(Crypto_all_adj, n = validation_size)
#this looks at makes it so we can see it in procentege
Training_all_pro <- NULL
for (i in 1:4) {
Training_all_pro<-cbind(Training_all_pro, (Training_all[,i]/Training_all[1,i]))
}
Training_all_pro<-as.data.frame(Training_all_pro)
colnames(Training_all_pro)<-NameCryptos
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(1:length(Bitcoin))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(1:length(Bitcoin))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(1:length(Bitcoin))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(1:nrwo(Training_all_pro))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(1:length(Training_all_pro))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(1:Training_size)) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(1:length(Bitcoin))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
length(Bitcoin)
length(Training_all_pro)
nrow(Training_all_pro)
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(1:nrow(Training_all_pro))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
cat("\033[31mRULES FOR THE CODE IF YOU WANT TO CHANGE ANYTHING
1. REMOVE ALL EXTRA GLOBAL VARIBELS YOU WONT BE
NEEDING AND YOU DONT THINK EVER WILL BE NEEDED
2. DONT YOU  DARE FUCKING TOUCH MY CODE\033[0m\n" )
library(quantmod)
library(ggplot2)
library(dplyr)
library(urca)
set.seed(420)#Blaze It
#start dag
day_one <- "2022-10-10" #skal være tidligst 2020-04-10
#code to bring in the data and refine it into one data frame + check for NA values
source("Projekt_kode_Pull_Crypto.R")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(1:nrow(Training_all_pro))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(nrow(Training_all_pro))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(x = 1:nrow(Training_all_pro), y = Training_all_pro)) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in levels, with each Crypto having it's own plot
for (i in 1:4) {
# Open pdf device
pdf(paste0("Billeder/Crypto_in_levels_", as.character(NameCryptos[i]), ".pdf"))
# Create the plot
p <- ggplot(Training_all, aes(x = 1:nrow(Training_all), y = Training_all[, i])) +
geom_line(aes(colour = as.character(NameCryptos[i]))) +
labs(x = "Days", y = "Price in Levels") +
scale_color_manual(
values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1", "Solana" = "blue", "Ripple" = "green"),
labels = as.character(NameCryptos[i]),
name = NULL
) +
theme(legend.position = "bottom")
# Print to pdf device
print(p)
# Close pdf device
dev.off()
}
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(x = 1:nrow(Training_all_pro), y = Training_all_pro)) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in levels, with each Crypto having it's own plot
for (i in 1:4) {
# Open pdf device
pdf(paste0("Billeder/Crypto_in_levels_", as.character(NameCryptos[i]), ".pdf"))
# Create the plot
p <- ggplot(Training_all, aes(x = 1:nrow(Training_all), y = Training_all[, i])) +
geom_line(aes(colour = as.character(NameCryptos[i]))) +
labs(x = "Days", y = "Price in Levels") +
scale_color_manual(
values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1", "Solana" = "blue", "Ripple" = "green"),
labels = as.character(NameCryptos[i]),
name = NULL
) +
theme(legend.position = "bottom")
# Print to pdf device
print(p)
# Close pdf device
dev.off()
}
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(x = 1:nrow(Training_all_pro), y = Training_all_pro)) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(x = 1:nrow(Training_all_pro), y = Training_all_pro)) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
p <- ggplot(Training_all_pro, aes(x = 1:nrow(Training_all_pro), y = Training_all_pro)) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
print(p)
cat("\033[31mRULES FOR THE CODE IF YOU WANT TO CHANGE ANYTHING
1. REMOVE ALL EXTRA GLOBAL VARIBELS YOU WONT BE
NEEDING AND YOU DONT THINK EVER WILL BE NEEDED
2. DONT YOU  DARE FUCKING TOUCH MY CODE\033[0m\n" )
library(quantmod)
library(ggplot2)
library(dplyr)
library(urca)
set.seed(420)#Blaze It
#start dag
day_one <- "2022-10-10" #skal være tidligst 2020-04-10
#code to bring in the data and refine it into one data frame + check for NA values
source("Projekt_kode_Pull_Crypto.R")
# Plotting prices in percentage all in one graf (changes from the day before to today)
p <- ggplot(Training_all_pro, aes(x = 1:nrow(Training_all_pro), y = Training_all_pro)) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plotting prices in percentage all in one graf (changes from the day before to today)
ggplot(Training_all_pro, aes(x = 1:nrow(Training_all_pro), y = Training_all_pro)) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "blue","Ripple"="green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
<<<<<<< Updated upstream
=======
var_Training_all <- VAR(Training_all)
var_Training_all <- VAR(Training_all)
library(quantmod)
library(ggplot2)
library(dplyr)
library(urca)
set.seed(420)#Blaze It
#start dag
day_one <- "2022-10-10" #skal være tidligst 2020-04-10
#code to bring in the data and refine it into one data frame + check for NA values
source("Projekt_kode_Pull_Crypto.R")
#source("Tests_in_Code.R")
var_Training_all <- VAR(Training_all)
library(quantmod)
library(ggplot2)
library(dplyr)
library(urca)
set.seed(420)#Blaze It
#start dag
day_one <- "2022-10-10" #skal være tidligst 2020-04-10
#code to bring in the data and refine it into one data frame + check for NA values
source("Projekt_kode_Pull_Crypto.R")
var_Training_all <- VAR(Training_all)
VARselect(y = var_Training_all, lag.max = 10,)
library(vars)
library(urca)
library(vars)
library(tseries)
var_Training_all <- VAR(Training_all)
var_Training_all <- VAR(Training_all)
VARselect(y = var_Training_all, lag.max = 10,)
VARselect(y = ts(Training_all), lag.max = 10,)
git config advice.addIgnoredFile false
"git config advice.addIgnoredFile false"
git config advice.addIgnoredFile false
>>>>>>> Stashed changes
