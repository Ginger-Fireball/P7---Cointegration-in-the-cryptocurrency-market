print(dd)
dd <- Crypto.all.adj[,1] / Crypto.all.adj[1, 1]
# Check result
print(dd)
dd <- Ethereum.adj / Crypto.all.adj[1, 1]
# Check result
print(dd)
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/min(Crypto.all.adj[1,i])))
}
View(Crypto.all.adj.pro)
View(Crypto.all.adj)
Crypto.all.adj[,1]
Crypto.all.adj[1,i]
Crypto.all.adj[1,1]
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
View(Crypto.all.adj.pro)
Crypto.all.adj<-as.data.frame(Crypto.all.adj)
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
View(Crypto.all.adj.pro)
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
Crypto.all.adj.pro<-as.data.frame(Crypto.all.adj.pro)
rm(df)
rm(i)
source("~/7 sem/Projekt_kode/Projekt_kode_Pull_Crypto.R", echo=TRUE)
source("~/7 sem/Projekt_kode/Projekt_kode_main.R", echo=TRUE)
View(Crypto.all.adj.pro)
View(Crypto.all.adj)
Crypto.all.adj<-as.data.frame(Crypto.all.adj)
Crypto.all.adj
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
View(Crypto.all.adj.pro)
colnames(Crypto.all.adj.pro)<-NameCryptos.adj
View(Crypto.all.adj.pro)
colnames(Crypto.all.adj.pro)<-NameCryptos
#Plibrary(quantmod)
library(quantmod)
library(ggplot2)
library(dplyr)
#code
source("Projekt_kode_Pull_Crypto.R")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Electricity Price") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
#  geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
#  geom_line(aes(y = Solana, colour = "Solana")) +
#  geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
#this looks at makes it so we can see it in procentege
Crypto.all.adj.pro<-NULL
for (i in 1:4) {
Crypto.all.adj.pro<-cbind(Crypto.all.adj.pro, (Crypto.all.adj[,i]/Crypto.all.adj[1,i]))
}
Crypto.all.adj.pro<-as.data.frame(Crypto.all.adj.pro)
colnames(Crypto.all.adj.pro)<-NameCryptos
View(Crypto.all.adj.pro)
#Plibrary(quantmod)
library(quantmod)
library(ggplot2)
library(dplyr)
#start dag
day_one<-"2022-10-10" #skal være tidligst 2020-04-10
#code
source("Projekt_kode_Pull_Crypto.R")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
#  geom_line(aes(y = Solana, colour = "Solana")) +
#  geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
#Plibrary(quantmod)
library(quantmod)
library(ggplot2)
library(dplyr)
#start dag
day_one<-"2022-10-10" #skal være tidligst 2020-04-10
#code
source("Projekt_kode_Pull_Crypto.R")
# Plot priser
ggplot(Crypto.all.adj.pro, aes(1:length(Solana.adj))) +
geom_line(aes(y = Bitcoin, colour = "Bitcoin")) +
geom_line(aes(y = Ethereum, colour = "Ethereum")) +
geom_line(aes(y = Solana, colour = "Solana")) +
geom_line(aes(y = Ripple, colour = "Ripple")) +
labs(x = "Days", y = "Procent") +
scale_color_manual(values = c("Bitcoin" = "red", "Ethereum" = "darkgoldenrod1","Solana"= "Blue","Ripple"="Green"),
labels = NameCryptos,
name = NULL) +
theme(legend.position = "bottom")
open("Projekt_kode_Pull_Crypto.R")
open(Projekt_kode_Pull_Crypto.R)
load("C:/Users/jensp/Downloads/melanoma30.RData")
source("C:/Users/jensp/Downloads/Mini_project_varighedsanalyse.R", echo=TRUE)
source("C:/Users/jensp/Downloads/Mini_project_varighedsanalyse.R", echo=TRUE)
install.packages("survminer")
install.packages("survminer")
library(ggplot2)
library(survival)
library(KMsurv)
library(survminer)
df_melanoma30 <- melanoma30
# View the first few rows and structure
head(df_melanoma30)
str(df_melanoma30)
summary(df_melanoma30)
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
View(df_melanoma30)
library(ggplot2)
library(survival)
library(KMsurv)
library(survminer)
df_melanoma30 <- melanoma30
# View the first few rows and structure
head(df_melanoma30)
str(df_melanoma30)
summary(df_melanoma30)
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
df_melanoma30 %>%
mutate(invas2=ifelse(invas2=="Clark I-III",1,
ifelse(invas2=="Clark IV-V",2,invas2)))
View(df_melanoma30)
df_melanoma30<-df_melanoma30 %>%
mutate(invas2=ifelse(invas2=="Clark I-III",1,
ifelse(invas2=="Clark IV-V",2,invas2)))
View(df_melanoma30)
a=0
b=0
c=0
d=0
for(i in length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
df_melanoma30[i,12]==1)
length(df_melanoma30[,1]
length(df_melanoma30[,1]
length(df_melanoma30[,1])
a=0
b=0
c=0
d=0
for(i in 1:length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
cat("For clark level |-||| there was",a,"survivors")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/b
cc<-c/d
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/a+b
cc<-c/d
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/a+b
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/(a+b)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
aa<-a/(a+b)
cc<-c/(c+d)
a=0
b=0
c=0
d=0
for(i in 1:length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
aa<-a/(a+b)
cc<-c/(c+d)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an
avereage survival rate of",cc,"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an
avereage survival rate of",cc,"which is in total",(a+b),"\n")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"which is in total",(a+b),"\n")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an
avereage survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an avereage
survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an avereage
survival rate of",cc,"which the total amount of patients",(c+d),"\n")
#Bruges til at trække Crypto priser
...
latex
\lstinputlisting[
...
#code
source("Projekt_kode_Pull_Crypto.R")
load("C:/Users/jensp/Downloads/melanoma30.RData")
load("C:/Users/jensp/Downloads/melanoma30.RData")
dplyr
library(dplyr)
library(ggplot2)
library(survival)
library(KMsurv)
library(survminer)
df_melanoma30 <- melanoma30
# View the first few rows and structure
head(df_melanoma30)
str(df_melanoma30)
summary(df_melanoma30)
#check for corelation between clark level and death
df_melanoma30<-df_melanoma30 %>%
mutate(invas2=ifelse(invas2=="Clark I-III",1,
ifelse(invas2=="Clark IV-V",2,invas2)))
View(df_melanoma30)
a=0
b=0
c=0
d=0
for(i in 1:length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
aa<-a/(a+b)
cc<-c/(c+d)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an avereage
survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an avereage
survival rate of",cc,"which the total amount of patients",(c+d),"\n")
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
# Histogram and density plot for continuous variables
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(aes(y = ..density.. * max(..count..)), color = "red") +
ggtitle(paste("Histogram and Density of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) -> plot
print(plot)
}
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars], skewness, na.rm = TRUE)
# Frequency tables
lapply(df_melanoma30[categorical_vars], table)
# Bar plots for categorical variables
for (var in categorical_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_bar(fill = "lightblue", color = "black") +
ggtitle(paste("Bar plot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) -> plot
print(plot)
}
df_melanoma30$thickness_cat <- cut(df_melanoma30$thickness,
breaks = quantile(df_melanoma30$thickness, probs = c(0, 1/5, 2/5, 3/5, 4/5, 1), na.rm = TRUE),
labels = c("Cat 1", "Cat 2", "Cat 3", "Cat 4", "Cat 5"))
plot(df_melanoma30$thickness_cat)
survival_object <- Surv(df_melanoma30$time, df_melanoma30$dead)
plot(survival_object)
# Fit Kaplan-Meier survival curves for thickness categories
fit <- survfit(survival_object ~ thickness_cat, data = df_melanoma30)
length(survival_object)
# Plot the survival curves
ggsurvplot(fit, data = df_melanoma30,
pval = TRUE, # Adds p-value from log-rank test
conf.int = TRUE, # Adds confidence intervals
risk.table = TRUE, # Shows risk table
ggtheme = theme_minimal(),
palette = "Dark2",
title = "Kaplan-Meier Survival Curves by Tumor Thickness Categories")
# Plot the survival curves
ggsurvplot(fit, data = df_melanoma30,
pval = TRUE, # Adds p-value from log-rank test
conf.int = TRUE, # Adds confidence intervals
risk.table = TRUE, # Shows risk table
ggtheme = theme_minimal(),
palette = "Dark2",
title = "Kaplan-Meier Survival Curves by Tumor Thickness Categories")
rm(a,b,c,d,aa,cc)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an avereage
survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an avereage
survival rate of",cc,"which the total amount of patients",(c+d),"\n")
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
# Histogram and density plot for continuous variables
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(aes(y = ..density.. * max(..count..)), color = "red") +
ggtitle(paste("Histogram and Density of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) -> plot
print(plot)
}
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars], skewness, na.rm = TRUE)
# Table of frequencies for categorical variables
categorical_vars <- c("status", "dead", "ici", "epicell", "ulceration", "sex", "invas2")
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars], skewness, na.rm = TRUE)
library(dplyr)
library(ggplot2)
library(survival)
library(KMsurv)
library(survminer)
df_melanoma30 <- melanoma30
# View the first few rows and structure
head(df_melanoma30)
str(df_melanoma30)
summary(df_melanoma30)
#check for corelation between clark level and death
df_melanoma30<-df_melanoma30 %>%
mutate(invas2=ifelse(invas2=="Clark I-III",1,
ifelse(invas2=="Clark IV-V",2,invas2)))
View(df_melanoma30)
a=0
b=0
c=0
d=0
for(i in 1:length(df_melanoma30[,1])){
if (df_melanoma30[i,12]==1) {
if (df_melanoma30[i,4]=="alive") {
a=a+1}
else{b=b+1}
}
else{
if (df_melanoma30[i,4]=="alive") {c=c+1
}
else{d=d+1}
}
}
aa<-a/(a+b)
cc<-c/(c+d)
rm(a,b,c,d,aa,cc)
cat("For clark level |-||| there was",a,"survivors",b,"dead giving an avereage
survival rate of",aa,"which the total amount of patients",(a+b),"\n")
cat("For clark level |V-V there was",c,"survivors",d,"dead giving an avereage
survival rate of",cc,"which the total amount of patients",(c+d),"\n")
# Boxplots for continuous variables
continuous_vars <- c("time", "thickness", "age", "logthick")
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) +
ylab("Values") -> plot
print(plot)
}
# Histogram and density plot for continuous variables
for (var in continuous_vars) {
ggplot(df_melanoma30, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(aes(y = ..density.. * max(..count..)), color = "red") +
ggtitle(paste("Histogram and Density of", var)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
xlab(var) -> plot
print(plot)
}
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars], skewness, na.rm = TRUE)
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars],skewness, na.rm = TRUE)
# Calculate skewness for continuous variables
sapply(df_melanoma30[continuous_vars],skewness, na.rm = FALSE)
View(df_melanoma30)
spec<-df_melanoma30[,11]
plot(spec)
print(df_melanoma30[,1])
print(df_melanoma30[,2])
print(df_melanoma30[,3])
print(df_melanoma30[,4])
print(df_melanoma30[,5])
print(df_melanoma30[,6])
sum(is.na(df_melanoma30))
